files:
  "/usr/local/bin/host-leader":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
      REGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null | jq -r .region`

      # Find the Auto Scaling Group name from the Elastic Beanstalk environment
      ASG=`aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" \
          --region $REGION --output json | jq -r '.[][] | select(.Key=="aws:autoscaling:groupName") | .Value'`

      # Find the first instance in the Auto Scaling Group
      FIRST=`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG \
          --region $REGION --output json | \
          jq -r '.AutoScalingGroups[].Instances[] | select(.LifecycleState=="InService") | .InstanceId' | sort | head -1`

      # If the instance ids are the same exit 0
      [ "$FIRST" = "$INSTANCE_ID" ]

  "/usr/local/bin/appy-etl":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      FORCE=""
      STAGE="${APPY_ETL_STAGE:-application}"

      function usage {
        echo usage: $0 [-h] [-f] [-s]
      }

      function help {
        usage
        echo
        echo appy etl
        echo
        echo optional arguments:
        echo "  -h, --help    show this help message"
        echo "  -f, --force   execute whether or not host instance is group leader"
        echo "  -s, --stage {application,review}"
        echo "                stage of application review process (default: $STAGE -- see \$APPY_ETL_STAGE)"
      }

      while [ $# != 0 ]; do
        case "$1" in
        --stage|-s)
          if ! [[ "$2" =~ ^(application|review)$ ]]; then
            usage
            echo error: invalid stage: "$2"
            exit 1
          fi
          STAGE="$2"
          shift ;;
        --force|-f)
          FORCE=t ;;
        --help|-h)
          help
          exit 0 ;;
        *) usage
           echo error: unrecognized argument: "$1"
           exit 1 ;;
        esac
        shift
      done

      if [ -z "$FORCE" ] && ! /usr/local/bin/host-leader; then
        echo fatal: host leadership test failed
        echo hint: specify --force to override
        exit 2
      fi

      if [ $STAGE = review ]; then
        OPTIONS=--closed
      fi

      /usr/local/bin/appy-report loadwufoo -v 2 --stage=$STAGE

      /usr/local/bin/appy-report loadapps $OPTIONS execute

  "/etc/cron.d/appy-etl":
    mode: "000644"
    owner: root
    group: root
    content: |
      5 7 * * * root /usr/local/bin/appy-etl

commands:
  rm_old_cron:
    # old cron files backed up in place on every deploy
    command: "rm -f /etc/cron.d/appy-etl.bak"
    ignoreErrors: true
