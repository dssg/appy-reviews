files:
  "/usr/local/bin/host-leader":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
      REGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null | jq -r .region`

      # Find the Auto Scaling Group name from the Elastic Beanstalk environment
      ASG=`aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" \
          --region $REGION --output json | jq -r '.[][] | select(.Key=="aws:autoscaling:groupName") | .Value'`

      # Find the first instance in the Auto Scaling Group
      FIRST=`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG \
          --region $REGION --output json | \
          jq -r '.AutoScalingGroups[].Instances[] | select(.LifecycleState=="InService") | .InstanceId' | sort | head -1`

      # If the instance ids are the same exit 0
      [ "$FIRST" = "$INSTANCE_ID" ]

  "/usr/local/bin/appy-etl":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      FORCE=""
      STAGE="${APPY_ETL_STAGE:-application}"

      function usage {
        echo usage: $(basename "$0") [-h] [-f] [-s]
      }

      function help {
        usage
        echo
        echo appy etl
        echo
        echo optional arguments:
        echo "  -h, --help    show this help message"
        echo "  -f, --force   execute whether or not host instance is group leader"
        echo "  -s, --stage {application,review}"
        echo "                stage of application review process (default: $STAGE -- see \$APPY_ETL_STAGE)"
      }

      while [ $# != 0 ]; do
        case "$1" in
        --stage|-s)
          if ! [[ "$2" =~ ^(application|review)$ ]]; then
            usage
            echo error: invalid stage: "$2"
            exit 1
          fi
          STAGE="$2"
          shift ;;
        --force|-f)
          FORCE=t ;;
        --help|-h)
          help
          exit 0 ;;
        *) usage
           echo error: unrecognized argument: "$1"
           exit 1 ;;
        esac
        shift
      done

      if [ -z "$FORCE" ] && ! /usr/local/bin/host-leader; then
        echo fatal: host leadership test failed
        echo hint: specify --force to override
        exit 2
      fi

      if [ $STAGE = review ]; then
        OPTIONS=--closed
      fi

      /usr/local/bin/appy-report loadwufoo -v 2 --stage=$STAGE

      /usr/local/bin/appy-report loadapps $OPTIONS

  "/usr/local/bin/appy-email":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      CMD=""
      FORCE=""

      function usage {
        echo usage: $(basename "$0") [-h] [-f] "{reminder,status}" ...
      }

      function help {
        usage
        echo
        echo appy emails
        echo
        echo postitional arguments:
        echo "  {reminder,status}   appy command to execute (sendreminder or sendstatus)"
        echo "  ...                 additional arguments for sendreminder or sendstatus command"
        echo
        echo optional arguments:
        echo "  -h, --help          show this help message"
        echo "  -f, --force         skip configuration check and execute whether or not host instance is group leader"
      }

      while [ $# != 0 ]; do
        case "$1" in
        reminder|status)
          CMD="send${1}"
          shift
          break ;;
        --force|-f)
          FORCE=t ;;
        --help|-h)
          help
          exit 0 ;;
        *) usage
           echo error: unrecognized argument: "$1"
           exit 1 ;;
        esac
        shift
      done

      if [ -z "$CMD" ]; then
        usage
        echo error: missing positional argument: "{reminder,status}"
        exit 1
      fi

      if [ -z "$FORCE" ]; then
        if [ $(date "+%Y") != "$YEAR_CHECK" ]; then
          echo fatal: year check failed
          echo hint: update \$YEAR_CHECK or specify --force to override
          exit 2
        elif ! /usr/local/bin/host-leader; then
          echo fatal: host leadership test failed
          echo hint: specify --force to override
          exit 2
        fi
      fi

      /usr/local/bin/appy-report $CMD "$@"

  "/etc/cron.d/appy-etl":
    mode: "000644"
    owner: root
    group: root
    content: |
      5 7 1-30 1 * root /usr/local/bin/appy-etl

      5 7 31 1 * root /usr/local/bin/appy-etl --stage review
      5 7 *  2 * root /usr/local/bin/appy-etl --stage review

  "/etc/cron.d/appy-emails":
    mode: "000644"
    owner: root
    group: root
    content: |
      # ensure that emails are explicitly opted into each year
      YEAR_CHECK=2022

      # Daily @ 7:25AM UTC
      #
      # (right after ETL)
      #
      # send confirmation emails to applicants whose applications are complete
      # and for which we've received at least two recommendations (and to whom
      # we haven't yet sent this confirmation)
      #

      25 7 * * * root /usr/local/bin/appy-email status -v 2 --submitted

      # Jan 14, 19, 24, 28 @ 1PM UTC
      #
      # notify:
      #
      #   (1) known references from whom we haven't received recommendations
      #   (2) applicants with *completed* applications re: missing recommendations
      #

      0  13 14,19,24,28 1 * root /usr/local/bin/appy-email status -v 2 --references --unsubmitted

      #
      #   (3) applicants re: their *incomplete* applications
      #

      10 13 14,19,24,28 1 * root /usr/local/bin/appy-email reminder -v 2 applicant

      # Jan 29 @ 1PM UTC
      #
      # notify:
      #
      #   * now-LATE references...
      #   * ...from whom we haven't received recommendations
      #   * ...for now-COMPLETED applications only
      #

      0  13 29 1 * root /usr/local/bin/appy-email status -v 2 --references --references-complete --references-late

      # Jan 31 @ 1PM UTC
      #
      # notify all applicants with completed applications (regardless
      # of recommendations) that the application period has ended
      #

      0  13 31 1 * root /usr/local/bin/appy-email status -v 2 --all-complete

commands:
  rm_old_cron:
    # old cron files backed up in place on every deploy
    command: "rm -f /etc/cron.d/appy-etl.bak /etc/cron.d/appy-emails.bak"
    ignoreErrors: true
